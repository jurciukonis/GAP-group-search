# In this program we look for the group centers (another method than the one provided in file "charCal.g") of the groups listed below.
# The groups counted here are classified in ref. [2].
# For more information about centers and computation methods see ref. [1]. 
# For more information on each discrete subgroups of U(3) and SU(3) see ref. [2].

# Author: Darius Jurciukonis
# Date: 2022-08

# If you use this code, please cite these references:
# [1] D. Jurciukonis and L. Lavoura, The centers of discrete groups as stabilizers of Dark Matter, arXiv:2210.12133.
# [2] D. Jurciukonis and L. Lavoura, GAP listing of the finite subgroups of U(3) of order smaller than 2000,  PTEP 2017 (2017) 5, 053A03, arXiv:1702.00005.

#------------------------------------------------------------------
# this program can be run in GAP with the command
# Read("~/GAP/CharCalc/centers_U(3).g");
#------------------------------------------------------------------

# List that contains groups that have faithful irreducible representations (irreps) of dimension 3 with matrices with determinant different from 1.
nbGU3:=[[27, 4], [36, 3], [48, 30], [63, 1], [81, 6], [81, 7], [81, 8], [81, 10], [81, 14], [96, 65], [108, 3], [108, 11], [108, 19], [108, 21], 
[117, 1], [144, 3], [162, 10], [162, 12], [162, 44], [171, 1], [189, 1], [189, 4], [189, 5], [189, 7], [192, 182], [192, 186], [216, 17], 
[216, 25], [225, 3], [243, 16], [243, 19], [243, 20], [243, 24], [243, 25], [243, 27], [243, 50], [243, 55], [252, 11], [279, 1], [300, 13], 
[324, 3], [324, 13], [324, 15], [324, 17], [324, 43], [324, 45], [324, 49], [324, 51], [324, 60], [324, 102], [324, 111], [324, 128], [333, 1], 
[351, 1], [351, 4], [351, 5], [351, 7], [384, 571], [384, 581], [387, 1], [432, 3], [432, 33], [432, 57], [432, 100], [432, 102], [432, 239], 
[432, 260], [432, 273], [441, 1], [441, 7], [468, 14], [486, 26], [486, 28], [486, 125], [486, 164], [513, 1], [513, 5], [513, 6], [513, 8], 
[549, 1], [567, 1], [567, 4], [567, 5], [567, 7], [567, 12], [567, 14], [567, 23], [567, 36], [576, 3], [588, 16], [600, 45], [603, 1], [648, 19], 
[648, 21], [648, 23], [648, 244], [648, 260], [648, 266], [648, 352], [648, 531], [648, 533], [648, 551], [648, 563], [657, 1], [675, 5], 
[675, 9], [675, 11], [684, 11], [711, 1], [729, 62], [729, 63], [729, 64], [729, 80], [729, 86], [729, 94], [729, 96], [729, 97], [729, 98], 
[729, 284], [729, 393], [729, 397], [756, 11], [756, 113], [756, 114], [756, 116], [768, 1085333], [768, 1085335], [768, 1085351], [819, 3], 
[819, 4], [837, 1], [837, 4], [837, 5], [837, 7], [864, 69], [864, 194], [864, 675], [864, 703], [864, 737], [873, 1], [900, 66], [927, 1], 
[972, 3], [972, 29], [972, 31], [972, 64], [972, 117], [972, 121], [972, 123], [972, 147], [972, 152], [972, 153], [972, 170], [972, 309], 
[972, 348], [972, 411], [972, 520], [972, 550], [981, 1], [999, 1], [999, 5], [999, 6], [999, 8], [1008, 57], [1053, 16], [1053, 25], [1053, 26], 
[1053, 27], [1053, 29], [1053, 32], [1053, 37], [1053, 47], [1089, 3], [1116, 11], [1143, 1], [1161, 6], [1161, 10], [1161, 11], [1161, 12], 
[1176, 57], [1197, 3], [1197, 4], [1200, 183], [1200, 682], [1251, 1], [1296, 3], [1296, 35], [1296, 37], [1296, 39], [1296, 220], [1296, 222], 
[1296, 226], [1296, 227], [1296, 237], [1296, 647], [1296, 688], [1296, 689], [1296, 699], [1296, 1239], [1296, 1499], [1296, 1995], [1296, 2113],
[1296, 2203], [1323, 1], [1323, 4], [1323, 5], [1323, 7], [1323, 14], [1323, 40], [1323, 42], [1332, 14], [1359, 1], [1404, 14], [1404, 137], 
[1404, 138], [1404, 140], [1413, 1], [1452, 11], [1458, 615], [1458, 618], [1458, 663], [1458, 666], [1458, 1095], [1458, 1354], [1458, 1371], 
[1467, 1], [1521, 1], [1521, 7], [1536, 408544641], [1536, 408544678], [1536, 408544687], [1539, 16], [1539, 25], [1539, 26], [1539, 27], 
[1539, 29], [1539, 32], [1539, 37], [1539, 47], [1548, 11], [1575, 7], [1629, 1], [1647, 6], [1647, 10], [1647, 11], [1647, 12], [1701, 68], 
[1701, 102], [1701, 112], [1701, 115], [1701, 126], [1701, 127], [1701, 128], [1701, 130], [1701, 131], [1701, 138], [1701, 240], [1701, 261], 
[1728, 3], [1728, 185], [1728, 953], [1728, 1286], [1728, 1290], [1728, 2785], [1728, 2847], [1728, 2855], [1728, 2929], [1737, 1], [1764, 11], 
[1764, 91], [1791, 1], [1809, 6], [1809, 10], [1809, 11], [1809, 12], [1872, 60], [1899, 1], [1944, 35], [1944, 37], [1944, 70], [1944, 707], 
[1944, 746], [1944, 832], [1944, 833], [1944, 1123], [1944, 2293], [1944, 2294], [1944, 2333], [1944, 2363], [1944, 2415], [1944, 3448], [1953, 3],
[1953, 4], [1971, 6], [1971, 10], [1971, 11], [1971, 12]];

# List that contains subgroups of SU(3).
nbGSU3:=[[12, 3], [21, 1], [24, 12], [27, 3], [39, 1], [48, 3], [54, 8], [57, 1], [60, 5], [75, 2], [81, 9], 
[84, 11], [93, 1], [96, 64], [108, 15], [108, 22], [111, 1], [129, 1], [147, 1], [147, 5], [150, 5], [156, 14], 
[162, 14], [168, 42], [183, 1], [189, 8], [192, 3], [201, 1], [216, 88], [216, 95], [219, 1], [228, 11], [237, 1], 
[243, 26], [273, 3], [273, 4], [291, 1], [294, 7], [300, 43], [309, 1], [324, 50], [327, 1], [336, 57], [351, 8], 
[363, 2], [372, 11], [381, 1], [384, 568], [399, 3], [399, 4], [417, 1], [432, 103], [444, 14], [453, 1], [471, 1], 
[486, 61], [489, 1], [507, 1], [507, 5], [513, 9], [516, 11], [525, 5], [543, 1], [567, 13], [579, 1], [588, 11], 
[588, 60], [597, 1], [600, 179], [624, 60], [633, 1], [648, 259], [648, 532], [651, 3], [651, 4], [669, 1], [675, 12], 
[687, 1], [723, 1], [726, 5], [729, 95], [732, 14], [741, 3], [741, 4], [756, 117], [768, 1083477], [777, 3], [777, 4], 
[804, 11], [813, 1], [831, 1], [837, 8], [849, 1], [864, 701], [867, 2], [876, 14], [903, 5], [903, 6], [912, 57], 
[921, 1], [939, 1], [948, 11], [972, 122], [975, 5], [993, 1], [999, 9], [1011, 1], [1014, 7], [1029, 6], [1029, 9], 
[1047, 1], [1053, 35], [1080, 260], [1083, 1], [1083, 5], [1092, 68], [1092, 69], [1101, 1], [1119, 1], [1137, 1], 
[1161, 9], [1164, 14], [1176, 243], [1191, 1], [1200, 384], [1209, 3], [1209, 4], [1227, 1], [1236, 11], [1263, 1], 
[1281, 3], [1281, 4], [1296, 228], [1299, 1], [1308, 14], [1317, 1], [1323, 8], [1323, 43], [1344, 393], [1350, 46], 
[1371, 1], [1389, 1], [1404, 141], [1407, 3], [1407, 4], [1425, 5], [1443, 3], [1443, 4], [1452, 34], [1458, 659], [1461, 1], 
[1488, 57], [1497, 1], [1524, 11], [1533, 3], [1533, 4], [1536, 408544632], [1539, 35], [1569, 1], [1587, 2], [1596, 55], 
[1596, 56], [1623, 1], [1641, 1], [1647, 9], [1659, 3], [1659, 4], [1668, 11], [1677, 3], [1677, 4], [1701, 135], [1713, 1], 
[1728, 1291], [1731, 1], [1734, 5], [1767, 3], [1767, 4], [1776, 60], [1803, 1], [1809, 9], [1812, 11], [1821, 1], [1839, 1], 
[1857, 1], [1875, 16], [1884, 14], [1893, 1], [1911, 3], [1911, 4], [1911, 14], [1929, 1], [1944, 849], [1956, 11], [1971, 9], 
[1983, 1]];

nbGtest:=[[648, 352], [864, 194], [864, 675], [864, 737], [1296, 1239], [1296, 1995], [1296, 2203], [1728, 953], [1728, 2785], [1728, 2929], [1944, 1123]];

#-----------------------------
SizeScreen([1000,20]);

# output folder
folder:="~/GAP/Data/charCalcU3/";
filename1:=JoinStringsWithSeparator([folder,"CentersU(3).dat"], "");

# we choose which group list we will examine
nbG:=nbGU3;
# nbG:=nbGSU3;
# nbG:=nbGtest;

# loop through group set:
for ii1 in [1 .. Length(nbG)] do 
# for ii1 in [1 .. 1] do 

G:=SmallGroup(nbG[ii1]);

repG:=IrreducibleRepresentations(G);
irr3D := Filtered(repG,x -> Length(Identity(G)^x)= 3);	# we select only three-dimensional irreps
# elG:=Elements(G);					# grupes elementu listas

# we find group generators and centers
centreG:=Center(G);
# Print("Centre: ", centreG,  "\n"); 

# genG:=GeneratorsOfGroup(G);
# Print("Generators: ", genG,  "\n");

# loop through the number of three-dimensional irreps:
maxPowList:=[];
    for id1 in [1 .. Length(irr3D)] do

# we express the elements of the center through 3D irrep matrices, we assign matrices of a specific irrep to each element of the center
    irr3DList:=List(centreG,x -> [x,x^irr3D[id1]]);

#     Display(irr3DList);
#     centreGList:=List(centreG,x -> x);
#     Print("centreGList: ", centreGList,  "\n"); 

# we select the first matrix element from the matrices of the center
    centrElemList:=[];
    for i1 in [1 .. Size(irr3DList)] do 
        centrElemList[i1]:=irr3DList[i1,2][1,1];
    od;
#     Print("centrElemList: ", centrElemList,  "\n");

# we calculate the phase powers
    powList:=[];
    for i1 in [1 .. Length(centrElemList)] do 
        pow:=0; sqVal:=0;
        while sqVal <> 1 do
            pow:=pow+1;
            sqVal:=centrElemList[i1]^pow;
        od;
        powList[i1]:=pow;  
    od;
    maxPow:=Maximum(powList);

#     maxPowList[id1]:=maxPow;

# we check that maxPow matches the number of center elements
    if maxPow=Size(centrElemList) then
        maxPowList[id1]:=maxPow;
    else
        maxPowList[id1]:=0;
    fi;

#     Print("Nb: ",id1, " ", maxPow,  " ", Size(centrElemList),  "\n");

    od; # end of loop through irreps

maxmaxPowList:=Maximum(maxPowList);

# output to the terminal
Print("Nb: ",ii1, " ", IdGroup(G), " ", maxmaxPowList, "\n");
# output to the file
AppendTo(filename1, IdGroup(G), " ", maxmaxPowList, "\n");

od; # end of loop through groups

Print("=====================================", "\n\n");
#=======================================================================================


